% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SOptim_GetTrainData.R
\name{getTrainData}
\alias{getTrainData}
\alias{getTrainData.default}
\alias{getTrainData.SpatialPointsDataFrame}
\alias{getTrainData.RasterLayer}
\alias{getTrainData.character}
\title{Generate supervised training data for classification}
\usage{
getTrainData(
  x,
  rstSegm,
  useThresh = TRUE,
  thresh = 0.5,
  na.rm = TRUE,
  dup.rm = TRUE,
  minImgSegm = 30,
  ignore = FALSE,
  tiles = NULL
)

\method{getTrainData}{default}(
  x,
  rstSegm,
  useThresh = TRUE,
  thresh = 0.5,
  na.rm = TRUE,
  dup.rm = TRUE,
  minImgSegm = 30,
  ignore = FALSE,
  tiles = NULL
)

\method{getTrainData}{SpatialPointsDataFrame}(
  x,
  rstSegm,
  useThresh = TRUE,
  thresh = 0.5,
  na.rm = TRUE,
  dup.rm = TRUE,
  minImgSegm = 30,
  ignore = FALSE,
  tiles = NULL
)

\method{getTrainData}{RasterLayer}(
  x,
  rstSegm,
  useThresh = TRUE,
  thresh = 0.5,
  na.rm = TRUE,
  dup.rm = TRUE,
  minImgSegm = 30,
  ignore = FALSE,
  tiles = NULL
)

\method{getTrainData}{character}(
  x,
  rstSegm,
  useThresh = TRUE,
  thresh = 0.5,
  na.rm = TRUE,
  dup.rm = TRUE,
  minImgSegm = 30,
  ignore = FALSE,
  tiles = NULL
)
}
\arguments{
\item{x}{Input train data used for classification. The input can be a \code{RasterLayer}, 
\code{SpatialPointsDataFrame} or a character string with a path to the raster layer.}

\item{rstSegm}{A path or a rasterLayer object containing the outputs of a segmentation algorithm 
with each object/segment identified by an integer index.}

\item{useThresh}{Use threshold to filter training data for multi-class? (default: TRUE; not 
used for points).}

\item{thresh}{A threshold value defining the minimum proportion of the segment ]0, 1] that 
must be covered by a certain class to be considered as a training case. This threshold will 
only apply if \code{x} is a \code{RasterLayer} which means you are using train areas/pixels. 
If you are running a \emph{"single-class"} problem then this threshold only applies to the 
class of interest (coded as 1's). Considering this, if a given segment has a proportion cover 
of that class higher than \code{thresh} then it is considered a train case. In contrast, for 
the background class (coded as 0's), only segments/objects totaly covered by that class are 
considered as train cases.      
If you are running a \emph{"multi-class"} problem then \code{thresh} is applied differently. 
First, the train class is determined by a majority rule then if that class covers more than 
the value specified in \code{thresh} this case is kept in train data otherwise it will be 
filtered out. See also \code{useThresh}.}

\item{na.rm}{Remove NA's? (default: TRUE). Only used if \code{x} is a 
\code{SpatialPointsDataFrame} object.}

\item{dup.rm}{Remove duplicate values? (default: TRUE; see details). Only used if \code{x} is a 
\code{SpatialPointsDataFrame} object.}

\item{minImgSegm}{Minimum number of image segments/objects necessary to generate train data.}

\item{ignore}{If set to TRUE then train data may contain one single class. This is useful in cases 
where sample units contain only positive or negative train cases. Also applies if the threshold value 
is employed. In this case if no positive cases are generated then negatives will be returned 
(default: FALSE).}

\item{tiles}{An object of class \code{SOptim.Tiles} creted by \code{\link{createRasterTiles}} 
used to read data fractionally by tiles (default: NULL, i.e. not used for).}
}
\value{
A two-column data frame with segment IDs (column "SID") and the corresponding train class 
(column "train").
}
\description{
An ancillary function used to generate training data for classification
}
\details{
In some cases, dependending on the type of input training data or the output of the segmentation, 
duplicate segment IDs (SID) may occur for different class(es) meaning that a given segment may have 
more than one training class. In those cases dup.rm should be set to TRUE (default).       

If \code{x} is a \code{SpatialPointsDataFrame} object then it must contain a column named "train" 
with class labels (integer).     

Raster data (in \code{x} and \code{rstSegm}) will be coerced to integer values before performing 
cross-tabulations to evaluate the percent coverage.
}
\note{
Train raster data must contain at least two categories, coded as integers: 
\itemize{
   \item - 0 and 1 for "single-class" (with 1's being the feature of interest); 
   \item - or 1,2,...,n for "multi-class".
}
To produce valid train data, the image segmentation produce must generate at least 30 unique 
segments (or objects)
}
\examples{

library(raster)

rstSegm <- raster(nrows=100, ncols=100, xmn=0, xmx=100,ymn=0,ymx=100,res=1)
km <- kmeans(coordinates(rstSegm),100,iter.max = 100)
values(rstSegm) <- km$cluster

rstTrain <- raster(nrows=100, ncols=100, xmn=0, xmx=100,ymn=0,ymx=100,res=1)
km <- kmeans(coordinates(rstTrain),5,iter.max = 100)
values(rstTrain) <- km$cluster

getTrainData(rstTrain, rstSegm)


}
